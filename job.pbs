#!/bin/bash
#PBS -A wec
#PBS -N tank2D
#PBS -l nodes=1:ppn=24
#PBS -l feature=24core
#####PBS -l walltime=12:00:00
#PBS -q debug
#####PBS -q short
#PBS -j oe
#PBS -m abe
#PBS -M eliot.quon@nrel.gov

#
# 
# This is the master script - all lines with the PBS directive will be copied
#     into the header of the job scripts in each case subdirectory
# - Define the simulation environment in a separate file (e.g. 'params.sh')
# - Multiple sweeps can be concurrently run in parallel, specified in the 'TODO'
#   section below
# 

# source params.sh
# TODO: specify source file with correct defaults
#       the 'paramNames' variable must match the columns in the .txt casefiles
#export inputFile=domain_study_defaults.sh
export inputFile=ext_domain_study_defaults.sh
. $PBS_O_WORKDIR/$inputFile

# reset nodelist so we can set up concurrent runs
cat $PBS_NODEFILE | sort > nodelist.$PBS_JOBID

# check the current licensing situation
echo "Checking license"
/nopt/nrel/admin/bin/lmutil lmstat -c 1999@wind-lic.nrel.gov -a

sweep=0
totalprocs=0
nodes=$PBS_NUM_NODES
cores=$PBS_NUM_PPN
maxprocs=$(($nodes*$cores))
procIds='' # list of process IDs for each call to runcases.sh
runcases()
{
    sweep=$((sweep+1))
    casefile=$1
    nprocs=$2
    if [ -z "$nprocs" ]; then nprocs=$maxprocs; fi
    totalprocs=$((totalprocs+nprocs))

    echo "Performing sweep $sweep using $nprocs processors with parameters from $inputFile"
    if [ "$totalprocs" -eq "$maxprocs" -a "$sweep" -eq 1 ]; then #output to screen
        casefile=$casefile nprocs=$nprocs sweep=$sweep ./runcases.sh 2>&1 &
    else #split output
        casefile=$casefile nprocs=$nprocs sweep=$sweep ./runcases.sh &> ${PBS_JOBNAME}.o${PBS_JOBID}_part$sweep &
    fi
    procIds="$procIds $!"
}



# TODO: Specify cases here
# the number of cores to use should add up to <= total number of cores requested
#runcases 2_domain_study_part1.txt 8
#runcases 2_domain_study_part2.txt 8
#runcases 2_domain_study_part3.txt 8
#runcases 2_domain_study.txt 8
runcases 2_ext_domain_study.txt 8



# need to wait for all processes to end before we let the script exit!
echo "Total processes started = $totalprocs"
echo "Waiting on process(es) $procIds ..."
wait $procIds

